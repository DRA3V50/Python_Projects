import tkinter as tk
from tkinter import messagebox
import os
import win32evtlog  # To interact with Windows event logs

# Function to display the dashboard
def display_dashboard():
    root = tk.Tk()
    root.title("Personal Security Dashboard")

    # Create labels for security status
    tk.Label(root, text="System Log Monitoring", font=("Arial", 14)).pack(pady=10)
    tk.Label(root, text="Network Penetration Testing", font=("Arial", 14)).pack(pady=10)
    tk.Label(root, text="Firewall Configuration", font=("Arial", 14)).pack(pady=10)

    # Function to read Windows event logs
    def read_windows_logs():
        server = 'localhost'  # name of the target computer to get logs from
        log_type = 'Security'  # type of event log (Security, Application, System)
        hand = win32evtlog.OpenEventLog(server, log_type)

        events = []
        while True:
            events = win32evtlog.ReadEventLog(hand, win32evtlog.EVENTLOG_BACKWARDS_READ, 0)
            if events:
                for event in events:
                    events.append(event.StringInserts)  # Add logs to list
            else:
                break

        return events

    def start_log_monitoring():
        try:
            messagebox.showinfo("Log Monitoring", "Started monitoring Windows event logs for suspicious activities.")
            logs = read_windows_logs()  # Read Windows event logs
            if logs:
                messagebox.showinfo("Event Logs", f"Found suspicious events: {logs}")
            else:
                messagebox.showinfo("Event Logs", "No suspicious events found.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to monitor logs: {e}")

    # Function for Network Penetration Testing (Simulated)
    def start_pen_testing():
        messagebox.showinfo("Pen Testing", "Started penetration testing (simulated).")
        # You could integrate `nmap` or `scapy` for real testing here
        open_ports = ["80", "443"]  # Simulated open ports
        if open_ports:
            messagebox.showinfo("Pen Test Result", f"Open ports detected: {', '.join(open_ports)}")
        else:
            messagebox.showinfo("Pen Test Result", "No open ports detected. The network is secure.")

    # Function to configure Windows firewall
    def configure_firewall():
        try:
            messagebox.showinfo("Firewall Configuration", "Adding a new inbound rule to the firewall.")
            os.system('netsh advfirewall firewall add rule name="AllowPort8080" dir=in action=allow protocol=TCP localport=8080')
            messagebox.showinfo("Firewall Configuration", "Firewall rule added successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to configure firewall: {e}")

    # Create buttons for actions
    tk.Button(root, text="Start Log Monitoring", command=start_log_monitoring).pack(pady=20)
    tk.Button(root, text="Start Network Penetration Testing", command=start_pen_testing).pack(pady=20)
    tk.Button(root, text="Configure Firewall", command=configure_firewall).pack(pady=20)

    # Run the application
    root.mainloop()

# Run the dashboard
display_dashboard()
